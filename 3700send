#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 500
TIMEOUT = 30
CSEQUENCE = 0
SEQUENCES = []

RTT = .9 ##round trip time (based on initial value)
RECVD = False ##data received
ALL_PACKETS = {} ## packets

cwnd = 1
adv_wnd = 5
ssthresh = adv_wnd
efwnd = min(cwnd, adv_wnd)



# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global CSEQUENCE

  data = sys.stdin.read(DATA_SIZE)


  if (len(data) > 0):
    tseq = CSEQUENCE
    msg = json.dumps({"time": time.time(), "sequence": CSEQUENCE, "ack": False, "eof": False, "data": data})
    CSEQUENCE += len(data)
    SEQUENCES.append(CSEQUENCE)
    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      ALL_PACKETS[CSEQUENCE] = json.loads(msg)
      log("Updated ALL_PACKETS")
      log("[send data] " + str(tseq) + " (" + str(len(data)) + ")" + " LENGTH OF MESSAGE: " + str(len(msg)))
    return True
  else:
    return False

#ADDED
def timestamp_rtt(data):
  global RTT
  #if len(ALL_PACKETS) > 2: 
  #rtt = data["time"] - ALL_PACKETS[CSEQUENCE]["time"] 
  rtt = ALL_PACKETS[CSEQUENCE]["time"] - ALL_PACKETS[CSEQUENCE - DATA_SIZE]["time"]
  log('rtt found: ' + str(rtt))
  RTT = ((len(ALL_PACKETS) - 1) * RTT + 1 * (rtt)) / len(ALL_PACKETS)


# Send first packet
#send_next_packet()
#def slows():
#  global cwnd
#  for i in range(0,cwnd):
#    send_next_packet()
#slows()
def advsend():
  global adv_wnd
  tdv = adv_wnd - len(SEQUENCES)
  for i in range(0, tdv):
    if (not send_next_packet()):
      return False
    return True
advsend()


def sendunacks():
  global ALL_PACKETS
  for i in SEQUENCES:
    msg = json.dumps(ALL_PACKETS[i])
    log("SEND: SENDING PACKET: " + str(i))
    if sock.sendto(msg, addr) < len(msg):
      log('PACKET DID NOT SEND')



while True:
  log("ABOUT TO SLEEP")
  rd, wd, ed = select.select([sock], [], [], 3*RTT)
  if rd:
    result = sock.recvfrom(MSG_SIZE)
  else:
    result = 0
  log("SEND: RESULT: " + str(result))
  if result:
    (data, addr) = result
    try:
    decoded = json.loads(data)

      if decoded['ack'] != SEQUENCES[0]:
        ind = SEQUENCES[0] #previously send packet/ack has been dropped
        if decoded['ack'] < SEQUENCES[0]:
          if decoded['ack'] == 0:
            ind = DATA_SIZE
          else:
            ind = decoded['ack'] + len(ALL_PACKETS[decoded['ack']]['data']) #packet directly after current
          sendunacks()
        else:
          msg = json.dumps(ALL_PACKETS[ind])
          log("SENDER: ABOUT TO SEND " + msg)
          if sock.sendto(msg, addr) < len(msg):
            log("[error] undable to fully send packet")

      # If there is an ack, send next packet
      #if decoded['ack'] == CSEQUENCE:
      if decoded['ack'] in SEQUENCES:
        tSEQ = SEQUENCES[0]
        log("[recv ack] " + str(tSEQ))
        RECVD = True
        log('[RTT] ' + str(RTT))
        timestamp_rtt(decoded)
        log('CURRENT RTT :' + str(RTT))
        ALL_PACKETS[tSEQ]['ack'] = True
        log('SEQENCE ' + str(tSEQ) + ' ack changed in table to TRUE')
        log('CWND: ' + str(cwnd))
        cwnd += 1
        SEQUENCES.pop(0)
        # Try to send next packet; break if no more data
        if (not advsend()):
          if len(SEQUENCES) == 0:
            break
      #else:
        ## wrong acknowledgement

        #if decoded['ack'] > SEQUENCES[0]:
        #  ind = SEQUENCES[0] #previously send packet/ack has been dropped
        #else:
        #  ind = decoded['ack'] + len(ALL_PACKETS[decoded['ack']]['data']) #packet directly after current 
        #msg = json.dumps(ALL_PACKETS[ind])
        #log("SENDER: ABOUT TO SEND " + msg)
        #if sock.sendto(msg, addr) < len(msg):
        #  log("[error] undable to fully send packet")


    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("SEND: [error] timeout")
    msg = json.dumps(ALL_PACKETS[CSEQUENCE])
    log("SEND: ABOUT TO RESEND " + msg)
    if sock.sendto(msg, dest) < len(msg):
      log("SEND: [error] unable to fully send packet")




sock.sendto(json.dumps({"time": datetime.datetime.now().strftime("%H:%M:%S.%f"), "eof": True, "data": "", "sequence": CSEQUENCE, "ack": False}), dest)

sys.exit(0)
