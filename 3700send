#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 500
TIMEOUT = 30
SEQUENCE = 0

RTT = .9 ##round trip time (based on initial value)
RECVD = False ##data received
ALL_PACKETS = {} ## packets


# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE

  data = sys.stdin.read(DATA_SIZE)


   if (len(data) > 0):
    msg = json.dumps({"time": time.time(), "sequence": SEQUENCE, "ack": False, "eof": False, "data": data})
    SEQUENCE += len(data)

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      ALL_PACKETS[SEQUENCE] = json.loads(msg)
      log("Updated ALL_PACKETS")
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")" + " LENGTH OF MESSAGE: " + str(len(msg)))
    return True
  else:
    return False

#ADDED
def timestamp_rtt(data):
  global RTT
  rtt = data["time"] - ALL_PACKETS[SEQUENCE]["time"]
  log('rtt found: ' + str(rtt))
  RTT = ((len(ALL_PACKETS) - 1) * RTT + 1 * (rtt)) / len(ALL_PACKETS)


# Send first packet
for i in range(0,9):
  try:
    send_next_packet()
  except:
    continue

while True:
  log("ABOUT TO SLEEP")
  rd, wd, ed = select.select([sock], [], [], 2*RTT)
  if rd:
    result = sock.recvfrom(MSG_SIZE)
  else:
    result = 0
  log("RESULT: " + str(result))
  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        log("[recv ack] " + str(SEQUENCE))
        RECVD = True
        log('[RTT] ' + str(RTT))
        timestamp_rtt(decoded)
        log('CURRENT RTT :' + str(RTT))
        ALL_PACKETS[SEQUENCE]['ack'] = True
        log('SEQENCE ' + str(SEQUENCE) + ' ack changed in table to TRUE')

             # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break
    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"time": datetime.datetime.now().strftime("%H:%M:%S.%f"), "eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
